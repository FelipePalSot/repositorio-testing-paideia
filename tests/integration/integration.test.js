import request from 'supertest';
import app from '../../src/server/index.js';

describe('Tests de Integraci√≥n - API de Autenticaci√≥n', () => {
  
  describe('POST /login', () => {
    
    it('deber√≠a retornar 200 y el usuario para credenciales v√°lidas', async () => {
      const res = await request(app)
        .post('/login')
        .send({
          nombre: 'Juan P√©rez',
          email: 'test@example.com',
          password: 'password123',
        });
      
      expect(res.statusCode).toEqual(200);
      expect(res.body.message).toBe('Login exitoso');
      expect(res.body.user).toEqual({
        nombre: 'Juan P√©rez',
        email: 'test@example.com'
      });
    });

    it('deber√≠a retornar 400 si el nombre es muy corto', async () => {
      const res = await request(app)
        .post('/login')
        .send({
          nombre: 'A',
          email: 'test@example.com',
          password: 'password123',
        });
      
      expect(res.statusCode).toEqual(400);
      expect(res.body.error).toBe('Nombre debe tener al menos 2 caracteres.');
    });

    it('deber√≠a retornar 400 para un formato de email inv√°lido', async () => {
      const res = await request(app)
        .post('/login')
        .send({
          nombre: 'Juan P√©rez',
          email: 'invalid-email',
          password: 'password123',
        });
      
      expect(res.statusCode).toEqual(400);
      expect(res.body.error).toBe('El formato de Correo electr√≥nico no es v√°lido.');
    });

    it('deber√≠a retornar 400 si la contrase√±a es muy corta', async () => {
      const res = await request(app)
        .post('/login')
        .send({
          nombre: 'Juan P√©rez',
          email: 'test@example.com',
          password: '123',
        });
      
      expect(res.statusCode).toEqual(400);
      expect(res.body.error).toBe('Contrase√±a debe tener al menos 8 caracteres.');
    });

    it('deber√≠a retornar 400 si falta el campo nombre', async () => {
      const res = await request(app)
        .post('/login')
        .send({
          email: 'test@example.com',
          password: 'password123',
        });
      
      expect(res.statusCode).toEqual(400);
      expect(res.body.error).toBe('Nombre es obligatorio.');
    });

    it('deber√≠a retornar 400 si falta el campo email', async () => {
      const res = await request(app)
        .post('/login')
        .send({
          nombre: 'Juan P√©rez',
          password: 'password123',
        });
      
      expect(res.statusCode).toEqual(400);
      expect(res.body.error).toBe('Correo electr√≥nico es obligatorio.');
    });

    it('deber√≠a normalizar espacios en el nombre', async () => {
      const res = await request(app)
        .post('/login')
        .send({
          nombre: '  Juan    P√©rez  ',
          email: 'test@example.com',
          password: 'password123',
        });
      
      expect(res.statusCode).toEqual(200);
      expect(res.body.user.nombre).toBe('Juan P√©rez');
    });

    it('deber√≠a trimear el email antes de validar', async () => {
      const res = await request(app)
        .post('/login')
        .send({
          nombre: 'Juan P√©rez',
          email: '  test@example.com  ',
          password: 'password123',
        });
      
      expect(res.statusCode).toEqual(200);
      expect(res.body.user.email).toBe('test@example.com');
    });
  });

  describe('POST /register', () => {
    
    it('deber√≠a retornar 201 para un registro v√°lido', async () => {
      const res = await request(app)
        .post('/register')
        .send({
          nombre: 'Mar√≠a Garc√≠a',
          email: 'maria@example.com',
          password: 'SecurePass123',
        });
      
      expect(res.statusCode).toEqual(201);
      expect(res.body.message).toBe('Registro exitoso');
      expect(res.body.user).toEqual({
        nombre: 'Mar√≠a Garc√≠a',
        email: 'maria@example.com'
      });
    });

    it('deber√≠a retornar 400 si la contrase√±a es menor a 12 caracteres', async () => {
      const res = await request(app)
        .post('/register')
        .send({
          nombre: 'Mar√≠a Garc√≠a',
          email: 'maria@example.com',
          password: 'Short1',
        });
      
      expect(res.statusCode).toEqual(400);
      expect(res.body.error).toBe('Contrase√±a debe tener al menos 12 caracteres.');
    });

    it('deber√≠a retornar 400 si la contrase√±a no tiene letras', async () => {
      const res = await request(app)
        .post('/register')
        .send({
          nombre: 'Mar√≠a Garc√≠a',
          email: 'maria@example.com',
          password: '123456789012',
        });
      
      expect(res.statusCode).toEqual(400);
      expect(res.body.error).toBe('Contrase√±a debe contener letras y n√∫meros');
    });

    it('deber√≠a retornar 400 si la contrase√±a no tiene n√∫meros', async () => {
      const res = await request(app)
        .post('/register')
        .send({
          nombre: 'Mar√≠a Garc√≠a',
          email: 'maria@example.com',
          password: 'SoloLetrasAqui',
        });
      
      expect(res.statusCode).toEqual(400);
      expect(res.body.error).toBe('Contrase√±a debe contener letras y n√∫meros');
    });

    it('deber√≠a retornar 400 para email inv√°lido en registro', async () => {
      const res = await request(app)
        .post('/register')
        .send({
          nombre: 'Mar√≠a Garc√≠a',
          email: 'email-sin-arroba',
          password: 'SecurePass123',
        });
      
      expect(res.statusCode).toEqual(400);
      expect(res.body.error).toBe('El formato de Correo electr√≥nico no es v√°lido.');
    });

    it('deber√≠a normalizar el nombre con emojis correctamente', async () => {
      const res = await request(app)
        .post('/register')
        .send({
          nombre: 'Ana üòÄ',
          email: 'ana@example.com',
          password: 'SecurePass123',
        });
      
      expect(res.statusCode).toEqual(201);
      expect(res.body.user.nombre).toBe('Ana üòÄ');
    });
  });

  describe('Casos extremos y de borde', () => {
    
    it('deber√≠a manejar nombres exactamente en el l√≠mite m√≠nimo', async () => {
      const res = await request(app)
        .post('/login')
        .send({
          nombre: 'AB',
          email: 'test@example.com',
          password: 'password123',
        });
      
      expect(res.statusCode).toEqual(200);
    });

    it('deber√≠a rechazar nombres que excedan 100 caracteres', async () => {
      const nombreLargo = 'A'.repeat(101);
      const res = await request(app)
        .post('/login')
        .send({
          nombre: nombreLargo,
          email: 'test@example.com',
          password: 'password123',
        });
      
      expect(res.statusCode).toEqual(400);
      expect(res.body.error).toBe('Nombre debe tener como m√°ximo 100 caracteres.');
    });

    it('deber√≠a rechazar contrase√±as que excedan 50 caracteres', async () => {
      const passwordLarga = 'A'.repeat(51);
      const res = await request(app)
        .post('/login')
        .send({
          nombre: 'Juan P√©rez',
          email: 'test@example.com',
          password: passwordLarga,
        });
      
      expect(res.statusCode).toEqual(400);
      expect(res.body.error).toBe('Contrase√±a debe tener como m√°ximo 50 caracteres.');
    });
  });
});
